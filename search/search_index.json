{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pymp4v2---python-bindings-for-mp4v2-library","title":"pymp4v2 - Python Bindings for mp4v2 Library","text":"<p>Python bindings for the mp4v2 library, providing a high-level interface for working with MP4 multimedia containers.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Full access to mp4v2 library functionality</li> <li>Support for reading, writing, and modifying MP4 files</li> <li>Cross-platform support (Windows and Linux)</li> <li>Pythonic API with proper error handling</li> <li>Automatic memory management</li> <li>Type annotations and stub files for better IDE support</li> </ul>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#build-dependencies","title":"Build Dependencies","text":"<ul> <li>Python 3.9+</li> <li>C++17 compatible compiler</li> <li>CMake 3.14+</li> <li>Ninja build system</li> <li>Git</li> </ul>"},{"location":"#python-dependencies","title":"Python Dependencies","text":"<ul> <li>setuptools &gt;= 42</li> <li>wheel</li> <li>scikit-build &gt;= 0.13</li> <li>cmake &gt;= 3.14</li> <li>ninja</li> <li>pybind11 &gt;= 2.6.0</li> <li>pybind11-stubgen &gt;= 2.5.5</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>See the Installation file.</p>"},{"location":"#usage","title":"Usage","text":"<p>See the Usage file.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>See the API file.</p>"},{"location":"#running-tests","title":"Running Tests","text":"<p>To run the test suite, you'll need to install the development dependencies:</p> <pre><code>pip install -e .[dev]\npytest tests/\n</code></pre> <p>Or use the built-in test runner:</p> <pre><code>python -m pytest tests/\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See the CONTRIBUTING.md file.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the license included in the repository.  See the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>mp4v2 library authors for the underlying C++ library</li> <li>Pybind11 team for the excellent binding infrastructure</li> <li>The Python community for excellent tooling and support</li> </ul>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions, please file an issue on the GitHub issue tracker.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>See the CHANGELOG.md file for a history of changes to the project.</p>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#api-reference","title":"API Reference","text":"<p>The library provides direct access to the MP4v2 C API through the pymp4v2.raw module. Key functions include:</p> <ul> <li><code>MP4Read(filename)</code> - Open an MP4 file for reading</li> <li><code>MP4Create(filename)</code> - Create a new MP4 file</li> <li><code>MP4Modify(filename)</code> - Open an MP4 file for modification</li> <li><code>MP4Close(handle)</code> - Close an MP4 file handle</li> <li><code>MP4GetFilename(handle)</code> - Get the filename associated with a handle</li> <li><code>MP4Info(handle)</code> - Get information about the MP4 file</li> <li><code>MP4Dump(handle)</code> - Dump the structure of the MP4 file</li> </ul> <p>For a complete list of available functions, refer to the MP4v2 documentation and explore the <code>pymp4v2.raw</code> module.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#0111---2025-09-16","title":"[0.1.11] - 2025-09-16","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Fix tox envs.</li> </ul>"},{"location":"changelog/#0110---2025-09-16","title":"[0.1.10] - 2025-09-16","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Fix deploy gh-pages.</li> </ul>"},{"location":"changelog/#019---2025-09-16","title":"[0.1.9] - 2025-09-16","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Deploy gh-pages.</li> </ul>"},{"location":"changelog/#018---2025-09-16","title":"[0.1.8] - 2025-09-16","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>CHANGELOG.md.</li> </ul>"},{"location":"changelog/#017---2025-09-16","title":"[0.1.7] - 2025-09-16","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>GitHub CI action for docs.</li> </ul>"},{"location":"changelog/#016---2025-09-16","title":"[0.1.6] - 2025-09-16","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>mkdocs support.</li> </ul>"},{"location":"changelog/#015---2025-09-16","title":"[0.1.5] - 2025-09-16","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial docs.</li> </ul>"},{"location":"changelog/#014---2025-09-16","title":"[0.1.4] - 2025-09-16","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>CONTRIBUTING.md.</li> </ul>"},{"location":"changelog/#013---2025-09-16","title":"[0.1.3] - 2025-09-16","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Comments for raw functions.</li> </ul>"},{"location":"changelog/#012---2025-09-16","title":"[0.1.2] - 2025-09-16","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Fix msvc-dev-cmd arg for CI.</li> </ul>"},{"location":"changelog/#011---2025-09-16","title":"[0.1.1] - 2025-09-16","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Pipfile.</li> </ul>"},{"location":"changelog/#011---2025-09-16_1","title":"[0.1.1] - 2025-09-16","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>bump4version support.</li> </ul>"},{"location":"changelog/#010---2025-09-15","title":"[0.1.0] - 2025-09-15","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>First release on GitHub.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/DarkDemiurg/pymp4v2/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pymp4v2 could always use more documentation, whether as part of the official pymp4v2 docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/DarkDemiurg/pymp4v2/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>pymp4v2</code> for local development.</p> <ol> <li>Fork the <code>pymp4v2</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/pymp4v2.git\n</code></pre> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ pip install -e .[dev]\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.9-3.13. Check    https://github.com/DarkDemiurg/pymp4v2/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ pytest tests/\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ bump4version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#from-source","title":"From Source","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/DarkDemiurg/pymp4v2.git\ncd pymp4v2\n</code></pre> <ol> <li>Install build dependencies:</li> </ol> <pre><code>pip install -e .[dev]\n</code></pre> <ol> <li>Build and install the package:</li> </ol> <pre><code>python setup.py build_ext --inplace\npip install -e .\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development, you might want to install additional tools:</p> <pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"installation/#building-from-source","title":"Building from Source","text":""},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Install Visual Studio 2022 with C++ support</li> <li>Install Python 3.9+</li> <li>Install CMake and add it to PATH</li> <li>Open Developer Command Prompt for VS 2022</li> <li>Run the build:</li> </ol> <pre><code>python setup.py build_ext\n</code></pre>"},{"location":"installation/#linux","title":"Linux","text":"<p>Install build dependencies:</p> <pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install build-essential cmake ninja-build git python3-dev\n\n# CentOS/RHEL\nsudo yum groupinstall \"Development Tools\"\nsudo yum install cmake ninja-build git python3-devel\n</code></pre> <p>Run the build:</p> <pre><code>python setup.py build_ext\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":""},{"location":"usage/#basic-example","title":"Basic Example","text":"<pre><code>import pymp4v2.raw as mp4\n\n# Open an MP4 file for reading\nwith mp4.MP4Read(\"video.mp4\") as handle:\n    # Get file information\n    filename = mp4.MP4GetFilename(handle)\n    print(f\"File: {filename}\")\n\n    # Get detailed info about the file\n    info = mp4.MP4Info(handle)\n    print(f\"Info: {info}\")\n\n    # Dump file structure\n    dump = mp4.MP4Dump(handle)\n    print(dump)\n\n\n# Create a new MP4 file\nwith mp4.MP4Create(\"output.mp4\") as handle:\n    # Add tracks and metadata here\n    pass\n\n# Modify an existing MP4 file\nwith mp4.MP4Modify(\"video.mp4\") as handle:\n    # Modify tracks and metadata here\n    pass\n</code></pre>"},{"location":"usage/#working-with-tracks","title":"Working with Tracks","text":"<pre><code>import pymp4v2.raw as mp4\n\nwith mp4.MP4Read(\"video.mp4\") as handle:\n    # Get the number of tracks\n    track_count = mp4.MP4GetNumberOfTracks(handle)\n    print(f\"Number of tracks: {track_count}\")\n\n    # Iterate through tracks\n    for i in  range(track_count):\n        track_id = mp4.MP4FindTrackId(handle, i)\n        track_type = mp4.MP4GetTrackType(handle, track_id)\n        print(f\"Track {i}: ID={track_id}, Type={track_type}\")\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<pre><code>import pymp4v2.raw as mp4\n\ntry:\n    with mp4.MP4Read(\"nonexistent.mp4\") as handle:\n        # This will not be executed\n        pass\nexcept RuntimeError  as e:\n    print(f\"Error opening file: {e}\")\n</code></pre>"}]}